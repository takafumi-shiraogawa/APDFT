Note for implementation of APDFT with molecular geometry changes
From May 24th, 2021.


Flowchart:
1. Calculate and save electronic energy and electron density of
   a reference system
2. Calculate stencil coefficients
3. Calculate one-electron integrals of both terms
4. Update the geometry of the target system
5. Re-calculate integral of the former terms
6. Back to 4


First milestone of the implementation is to calculate the energy
of the charge and geometry changes.
For this purpose, tasks are
1. Make an argument "energies_geometries" for generating input
   files and folders need to be modified.
2. Make directries and inputs of QM calculations for obtaining
   perturbed electron densities with molecular geometry changes.
3. Set targets with different molecular geometry from a reference
   molecule. (Read target geometry)
4. Numerical integration
5. Nuclear-nuclear repulsion


apdft.commandline.py

change apdft.commandline.build_main_commandline to allow
for 'energies_geometries' for command line arguments

Cost estimation:
   commandline.mode_energies_geometries
   -> derivatives.estimate_cost_and_coverage_general()
   -> physics.estimate_cost_and_coverage_general(self)
   -> physics.enumerate_all_targets(self)
   -> apdft.math.IntegerPartitions.partition

Make directories and commands.sh of QM calculations:
   commandline.mode_energies_geometries
   -> derivatives.prepare(conf.debug_validation)
      derivatives.analyse(conf.debug_validation)
   -> physics.apdft.prepare_general

APDFT
   commandline.mode_energies_geometries
   -> derivatives.analyse_general(conf.debug_validation)
   -> physics.analyse_general
   -> physics.predict_all_targets_general
      -> physics.enumerate_all_targets


To use new molecular geometry:
   1. Read a new geometry of a reference molecule.
      Need to change commandline.
      cli.py energies_geometries *.xyz *.xyz
   2. Make a new option in apdft.conf.
      Need to change settings.Configuration.__init__

   Read a actual coordinate
      commandline.mode_energies_geometries
      -> apdft.read_xyz  (__init__.py)

   modeshort_2: *.xyz
   configuration = apdft.settings.Configuration()
   configuration.energy_geometry2

   The target geometry is obtained at
   commandline.mode_energies_geometries.
   This needs to used in inputs of QM calculations.
   physics.prepare_general needs to be changed.
   -> self._calculator.get_input
   -> calculator.pyscf
   calculator.pyscf needs to obtain the target geometry.
   /src/apdft/calculator/templates/pyscf2.py was made for
   a new template.


Calculation of nuclear-nuclear repulsion energy
   This can be done in QM calculations by PySCF.
   The template of the QM calculation is
   /src/apdft/calculator/templates/pyscf2.py
   mol.energy_nuc()

   In APDFT results, only total energies are presented,
   and electronic energy is not presented in the QM calculation
   results.
   In the development version of APDFT (GitHub not released version),
   the nuclear-nuclear repulsion energy is printed as "NN_ENERGY" in
   the QM calculation results.
   physics.Coulomb.nuclei_nuclei(coordinates, charges)

   commandline.mode_energies_geometries
   -> physics.analyse_general
   -> physics.predict_all_targets_general

Perturbed electron densities
   commandline.mode_energies_geometries
   -> physics.analyse_general
   -> physics.predict_all_targets_general
   -> physics._get_stencil_coefficients(self, deltaZ, shift):
         shift is used to increase the order of factorial of the density
         for the energy.
         For the property, the order is same with the density.
      --
      physics.get_epn_coefficients_general(self, deltaZ):
         -> self._get_stencil_coefficients(deltaZ, 1)
         It is used for the energy prediction.
      or
      physics.get_linear_density_coefficients_general(self, deltaZ):
         -> self._get_stencil_coefficients(deltaZ, 0)
         It is used for the property prediction.

   physics.predict_all_targets_general
      epn_matrix(the number of QM calculations, the number of atoms)
      is obtained by iteratively using
      epn_matrix = self.get_epn_matrix()

   For nuclear charge changes, the dimension of epn_matrix is
   (the number of QM calculations, the number of atoms)
   For example, N2 has seven QM calculations and two atoms
   order-0: 1 directry
   order-1: 4 directries
   order-2: 2 directries


   ** For checking dependence of perturbed electron density
   ** on fraction numbers for finite differential
      Because it is difficult to compare the perturbed density and APDFT
      energies which depend on the external potential and molecular symmetry,
      it is natural that the energy derivatives are compared.

      1. apdft.conf can be utilized to specify the fraction numbers.
      2. Prepare templates for apdft.conf like pyscf2.py (apdft.conf.template).
      3. apdft.conf.template has {{deltaZ}} and {{deltaR}}.
      4. commands.sh is copied.
      5. implementation files are copied.
      6. Make implementation files for all calculations.
         6.1. For running all imp_mod_cli1.sh -> all_imp_mod_cli1.sh
         6.2. For running all commands.sh -> all_commands.sh
         6.3. For running all imp_mod_cli2.sh -> all_imp_mod_cli2.sh
      7. Copy *.xyz and *_mod.xyz (e.g., n2.xyz and n2_mod.xyz).
      8. Prepare order.inp for specifying dZ or dR.

      Standard values
         dZ: 0.05, count = 99
         dR: 0.005, count = 99

Notice that in total/, contributions from order1 and order3 are zero
because of the symmetry of the N2 molecule.

n2_1.0/
total_contributions
"C,O",4.595785867422819e-07,0.0,-3.1398006888848613,4.595785867422819e-07
"N,N",0.0,0.0,0.0,0.0
"O,C",-4.5960769057273865e-07,0.0,-3.1398006888844066,-4.5960769057273865e-07

delta-6-9/
"C,O",-1.133877958636731e-06,5.684341886080802e-14,-3.1398098404129087,-1.133877958636731e-06
"N,N",0.0,0.0,0.0,0.0
"O,C",1.1338634067215025e-06,-5.684341886080802e-14,-3.139809840412454,1.1338634067215025e-06

order1 and order3 have numerical errors since they are zero.

Calculation of electronic delta E:
   --
   for order in sorted(self._orders):
                contributions = -np.multiply(
                    np.outer(alphas[:, order], deltaZ_included), epn_matrix
                ).sum()
   --
   alphas[:, order] has the dimension of QM calculations
   (all types of the densities).
   deltaZ_included is the charge changes at each atom and has the dimension
   of the number of atoms. For example, deltaZ_included of N2 is [-1 1].
   np.outer(alphas[:, order], deltaZ_included) generates the matrix that has
   the dimension of (the number of QM calculations, the number of atoms).
   np.multiply of this matrix and epn_matrix gives the matrix with the elements
   of multiplying each component.


   physics.get_epn_matrix_general uses folders.
   folders is obtained by physics.get_folder_order_general.

   The order of folders and eps is given in physics.get_epn_matrix_general
   and physics.get_folder_order_general, respectively.
   These are in the same order.

   In physics.predict_all_targets_general
   deltaZ -> target and reference Z
             target and self._nuclear_numbers


Atomic force calculation:
   Atomic force has three terms:
      1, Hellmann-Feynman ionic force;
      2, changes in the perturbed density;
      3, nuclear part.

   1, Hellmann-Feynman ionic force:
      The elements of the Hellmann-Feynman ionic force are presented
      in log files of PySCF calculations.
      A function, PyscfCalculator.get_ionic_force can be used to obtain
      values.
      For the reference, to calculate the electric dipole moment,
      get_linear_density_matrix_general of physics.py is used,
      but this function only reads one-dimensional information.
      On the other hand, atomic forces have values for each atom.
      Therefore, get_epn of pyscf.py can be refered.
         get_epn is called in get_epn_matrix of physics.py to
         construct the EPN matrix.

      ELECTRONIC_DIPOLE_MOMENT
         Constructed in get_linear_density_matrix_general


   3, nuclear part:
      The nuclear part is calculated by Coulomb.nuclei_atom_force
      of physics.py.
      This function is called in predict_all_targets_general of
      physics.py.





Note for implementation of higher-order APDFT (higher than APDFT3)
The followings need to be modified:
  For perturbed electron densities
    settings.APDFT.estimate_cost_and_coverage_general
    physics.APDFT.prepare


Outputs list
   "energies" mode
      Energy:
         energies.csv
         ele_energies.csv
         nuc_energies.csv

      Hellmann-Feynman atomic forces:
         forces.csv
         ele_forces.csv
         nuc_forces.csv

      Electric dipole moments:
         dipoles.csv
         ele_dipoles.csv
         nuc_dipoles.csv


   "energies_geometries" mode
      Energy:
         energies.csv
         ele_energies.csv
         nuc_energies.csv
         energies_reference_contributions.csv
         energies_target_contributions.csv
         energies_total_contributions.csv

      Atomic forces:
         atomic_forces.csv
         ele_atomic_forces.csv
         nuc_atomic_forces.csv
         hf_ionic_force_contributions.csv
         deriv_rho_contributions.csv

      Hellmann-Feynman atomic forces:
         hf_ionic_forces.csv
         nuc_hf_ionic_forces.csv
         ele_hf_ionic_forces.csv
