#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jan 18 16:02:03 2020

@author: misa
"""

from abc import ABC, abstractmethod

class ML_Base(ABC):
    def load_raw_data(self):
        pass
    def generate_representation(self):
        pass
    def generate_labels(self):
        pass
    
    def generate_kernel(self):
        pass
    
    def split_data(self):
        pass
    
    def optimize_hyperparameters(self):
        pass
    def generate_learning_curve(self):
        pass


import numpy as np

class Qml_Interface(object):
    def __init__():
        pass
    
    def wrapper_alch_data(self, path='/home/misa/APDFT/prototyping/atomic_energies/results/slice_ve38/atomic_energies_mic'):
        """
        reads paths to raw data from file at path
        """
        # load paths to data
        self.paths = []
        with open(path, 'r') as f:
            for line in f:
                self.paths.append(line.rstrip('\n'))
                
    def load_raw_data(self):
        """
        loads information about molecules into list
        each element contains charge coordinates, alchemical potential, raw atomic energies
        and atomic atomisation energies
        
        paths: list of paths to atomisation energy files
        """
        
        # matrix for all representations
        alchemy_data = []
        molecule_size = np.zeros(len(self.paths), dtype=np.intc)
        for idx, path in enumerate(self.paths):
            alch = np.loadtxt(path)
            molecule_size[idx] = len(alch[:, 0])
            alchemy_data.append(alch)
        
        return(alchemy_data, molecule_size)