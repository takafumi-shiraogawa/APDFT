Personal note for Takafumi Shiraogawa.
From May 17th, 2021.


APDFT code requires Python 3.6 or newer.
My environment can be checked by
$ python3 -V
Python 3.9.5
The condition is fulfilled.
We also need to check the default version of Python by
$ python --version
Python 2.7.16
To switch from python 2 to 3, I installed pyenv
$ brew install pyenv
$ echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bash_profile
$ echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bash_profile
$ echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
$ pyenv install 3.6.13
$ pyenv versions
system
3.6.13
$ pyenv global 3.6.13


-- Set an environment --
I installed the code in Mac.
/docs/installation.rst is useful for beginning this code.
I did
$ sudo pip3 install jinja2 basis_set_exchange Cython numpy scipy h5py pyscf cclib structlog colorama
Because structlog v.21.1.0 does not work for the APDFT code now,
I need to change the version.
$ pip3 uninstall structlog
$ pip3 install structlog==19.1.0
$ pip3 install pandas
PySCF (v1.7.6) works properly for APDFT.
If one needs, the command is
$ pip3 uninstall pyscf
$ pip3 install pyscf==1.7.6
The paths were setted in .bash_profile by adding
export PATH=$PATH:/Users/takafumishiraogawa/Program/gAPDFT/src/
export PYTHONPATH=$PYTHONPATH:/Users/takafumishiraogawa/Program/gAPDFT/src/
Then, I did
$ source ~/.bash_profile
Finally, APDFT was installed.
$ pip install apdft
This is installed in /usr/local/lib/python3.9/site-packages/apdft/.
(It is known by $ pip show apdft)
I slightly changed this apdft for calculations with my environment.
The examples can be found in /Users/takafumishiraogawa/Program/original_apdft_test.
For test calculations,
$ apdft energies benzene.xyz
for the standard version or
$ cli.py energies benzene.xyz
for the development version can be used


-- Start a test calculation --
I can refer docs/usage.rst
For test calculations, I made TStest/ in test/.
I created n2/ in TStest/ and copied n2.xyz from test/.
$ apdft energies n2.xyz
or
$ cli.py energies n2.xyz
command.sh, apdft.conf, and QM/ were generated.

After changing apdft.conf and removing QM/, by running
$ apdft energies n2.xyz
again, new inputs for a specific condition can be obtained.

Then, for required electonic densities,
QM calculations are performed by
$ . commands.sh
At each QM/ directory, run.log can be obtained.

* descriptions obtained from docs/usage.rsf
apdft.conf:
  The configuraton file.
command.sh:
  All required calls to QM software like Gaussian and MRCC
  to obtain the energies and electron densities apdft needs.
  This file assumes standard paths for each of the software package.
  If you system differs from that for any reason, you might need to
  adjust environment variables accordingly. Each line contains all
  required commands for a single calculation, therefore they can be
  executed independently from each other. The commands are written
  to be called from the directory the script is in.
QM/order-*/:
  Folders containing the generated input files for the QM software packages.
  The folder structure needs to be kept the same.

At times, the number of possible alchemical prediction targets, i.e. molecules
for which you will get estimates from APDFT can be overwhealming. In that case,
you may restrict the number of potential targets by either limiting the sites
that are transformed, limiting the maximum change in nuclear charge at all sites
(with the command line option --apdft_maxdz), or by lowering the maximal net charge
of target molecules (with --apdft_maxcharge).
  --apdft_maxdz: sum of maximum absolute difference in Z space from center around.
  --apdft_maxcharge: ?
  --apdft_maxorder: specifies the truncation order of APDFT - 1 (APDFTn-1).
                    For example, apdft_maxorder = 2 is APDFT3.
                    APDFT4 or larger ones are not implemented.

To limit the sites to be transformed, use the command line option '--apdft_includeonly'.
This option accepts either a list of indices (i.e. atom numbers starting at zero), ranges
of indices, or a list of elements. All of the following examples would be a valid input.
  --apdft_includeonly 0,1,23
  --apdft_includeonly B,C,N
  --apdft_includeonly 0-42,C,110

energy_code is G09 or PYSCF or others.
  G09: HF, PBE0, B3LYP, and CCSD
  PYSCF: HF and CCSD


* examples of N2
number_calculations = 7,
number_predictions = 3

apdft.conf:
apdft_maxdz = 3
apdft_maxorder = 2
apdft_maxcharge = 0


commands.sh:
( cd QM/order-0/site-all-cc && bash run.sh )
( cd QM/order-1/site-0-up && bash run.sh )
( cd QM/order-1/site-0-dn && bash run.sh )
( cd QM/order-1/site-1-up && bash run.sh )
( cd QM/order-1/site-1-dn && bash run.sh )
( cd QM/order-2/site-0-1-up && bash run.sh )
( cd QM/order-2/site-0-1-dn && bash run.sh )

Inputs of QM calculations needed for evaluation of the electron-density response
are stored in QM/.
QM/
  order-0/
    site-all-cc/
  order-1/
    site-0-dn/
    site-0-up/
    site-1-dn/
    site-1-up/
  order-2/
    site-0-1-dn/
    site-0-1-up/


-- Code structure --
APDFT/src/
  cli.py : main execution program
  apdft/
    __init__.py
    commandline.py
    math.py
    physics.py
    settings.py
    calculator/
      __init__.py
      gaussian.py
      mrcc.py
      psi4.py
      pyscf.py
      templates/
        gaussian-run.sh
        horton.py
        mrcc-run.sh
        psi4-run.sh
        pyscf-run.sh
        gaussian.txt
        mock-run.sh
        mrcc.txt
        psi4.txt
        pyscf.py

  * cli.py
  Important 

  * History generated by $ cli.py energies n2.xyz
  /gAPDFT/src/apdft/__init__.py:2(<module>)
  /gAPDFT/src/apdft/commandline.py:2(<module>)
  /gAPDFT/src/apdft/physics.py:2(<module>)
  /pandas/__init__.py:3(<module>)
  /pandas/core/api.py:3(<module>)
  /numpy/__init__.py:106(<module>)
  /basis_set_exchange/__init__.py:6(<module>)
  /basis_set_exchange/readers/__init__.py:3(<module>)
  /basis_set_exchange/readers/read.py:3(<module>)
  /basis_set_exchange/validator.py:3(<module>)
  /jsonschema/__init__.py:9(<module>)
  /pandas/core/groupby/__init__.py:1(<module>)
  /pandas/core/groupby/generic.py:7(<module>)
  /pandas/core/arrays/__init__.py:1(<module>)
  /numpy/core/__init__.py:7(<module>)

  Here Python libraries are in
  pyenv/versions/3.6.13/lib/python3.6/site-packages/

  cli.py energies *.xyz -> entry_cli in commandline.py

For implementation, there is a documentation in the code.
To add support for your favourite QM program, you need a new calculator class.
This is done by adding a corresponding file in apdft.calculator , where a new
class inherits from apdft.calculator.Calculator .
This class needs to implement the following functions:
get_input for the generation of the corresponding input file.
If necessary, there is a folder for input file templates that can help keep
the code clean.
get_epn to obtain the electronic electrostatic potential at each nucleus for
each calculation.
Furthermore, the a$ribute _methods of the class needs to hold a dictionary of
all supported levels of theory.
Afterwards, the supported code needs to be registered in
apdft.settings.CodeEnum such that the user can select it via the command line
interface.
Finally, the command line handler in commandline.mode_energies() needs a
selection branch for the new calculator.



How to add a new input variable in apdft.conf?
   1. add a new option to apdft/settings.py's Configuration.__init__
   2. add the new variable in "derivatives" of a mode_energies and
      mode_energies_geometries in apdft/commandline.py
   3. add an argument of __init__ of class APDFT of apdft/physics.py,
      which corresponds to the new variable in "derivative"
Need to note that arguments of APDFT is same for both energies and
energies_geometries modes.
Therefore, in step 2, same derivatives must be used.



How to add a new input variable in run.inp (QM calculation inputs)?
  We need to add variables in QM inputs.
   A. Functions prepare and prepare_general of apdft/physics.py in
      energies and energies_geometries modes, respectively generate QM inputs.
      In prepare and prepare_general, self._calculator.get_input makes
      input files.
      Add a target variable in arguments of self._calculator.get_input
   B. Another option is possible. Add a new variable in __init__.py in
      calculator/. However, it is quite general treatment and affect all
      the calculaters.


Specify targets
    Target molecules can be specified by apdft_targets in apdft.conf,
    but mutated atoms cannot be specified.
